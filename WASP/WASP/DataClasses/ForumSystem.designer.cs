#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WASP.DataClasses
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Forums_System")]
	public partial class ForumSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIAdmin(IAdmin instance);
    partial void UpdateIAdmin(IAdmin instance);
    partial void DeleteIAdmin(IAdmin instance);
    partial void InsertIForumMember(IForumMember instance);
    partial void UpdateIForumMember(IForumMember instance);
    partial void DeleteIForumMember(IForumMember instance);
    partial void InsertIForum(IForum instance);
    partial void UpdateIForum(IForum instance);
    partial void DeleteIForum(IForum instance);
    partial void InsertIModerator(IModerator instance);
    partial void UpdateIModerator(IModerator instance);
    partial void DeleteIModerator(IModerator instance);
    partial void InsertINotification(INotification instance);
    partial void UpdateINotification(INotification instance);
    partial void DeleteINotification(INotification instance);
    partial void InsertIPost(IPost instance);
    partial void UpdateIPost(IPost instance);
    partial void DeleteIPost(IPost instance);
    partial void InsertISubForum(ISubForum instance);
    partial void UpdateISubForum(ISubForum instance);
    partial void DeleteISubForum(ISubForum instance);
    partial void InsertIUser(IUser instance);
    partial void UpdateIUser(IUser instance);
    partial void DeleteIUser(IUser instance);
    #endregion
		
		public ForumSystemDataContext() : 
				base(global::WASP.Properties.Settings.Default.Forums_SystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForumSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<IAdmin> IAdmins
		{
			get
			{
				return this.GetTable<IAdmin>();
			}
		}
		
		public System.Data.Linq.Table<IForumMember> IForumMembers
		{
			get
			{
				return this.GetTable<IForumMember>();
			}
		}
		
		public System.Data.Linq.Table<IForum> IForums
		{
			get
			{
				return this.GetTable<IForum>();
			}
		}
		
		public System.Data.Linq.Table<IModerator> IModerators
		{
			get
			{
				return this.GetTable<IModerator>();
			}
		}
		
		public System.Data.Linq.Table<INotification> INotifications
		{
			get
			{
				return this.GetTable<INotification>();
			}
		}
		
		public System.Data.Linq.Table<IPost> IPosts
		{
			get
			{
				return this.GetTable<IPost>();
			}
		}
		
		public System.Data.Linq.Table<ISubForum> ISubForums
		{
			get
			{
				return this.GetTable<ISubForum>();
			}
		}
		
		public System.Data.Linq.Table<IUser> IUsers
		{
			get
			{
				return this.GetTable<IUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admins")]
	public partial class IAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _forumId;
		
		private EntityRef<IForum> _Forum;
		
		private EntityRef<IUser> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    #endregion
		
		public IAdmin()
		{
			this._Forum = default(EntityRef<IForum>);
			this._User = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Admin", Storage="_Forum", ThisKey="forumId", OtherKey="id", IsForeignKey=true)]
		public IForum IForum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				IForum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.IAdmins.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.IAdmins.Add(this);
						this._forumId = value.id;
					}
					else
					{
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IForum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				IUser previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IAdmins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IAdmins.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumMembers")]
	public partial class IForumMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _forumId;
		
		private int _userId;
		
		private EntityRef<IForum> _Forum;
		
		private EntityRef<IUser> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    #endregion
		
		public IForumMember()
		{
			this._Forum = default(EntityRef<IForum>);
			this._User = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_ForumMember", Storage="_Forum", ThisKey="forumId", OtherKey="id", IsForeignKey=true)]
		public IForum IForum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				IForum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.IForumMembers.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.IForumMembers.Add(this);
						this._forumId = value.id;
					}
					else
					{
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IForum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumMember", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				IUser previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IForumMembers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IForumMembers.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forums")]
	public partial class IForum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _subject;
		
		private EntitySet<IAdmin> _Admins;
		
		private EntitySet<IForumMember> _ForumMembers;
		
		private EntitySet<IPost> _Posts;
		
		private EntitySet<ISubForum> _SubForums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    #endregion
		
		public IForum()
		{
			this._Admins = new EntitySet<IAdmin>(new Action<IAdmin>(this.attach_Admins), new Action<IAdmin>(this.detach_Admins));
			this._ForumMembers = new EntitySet<IForumMember>(new Action<IForumMember>(this.attach_ForumMembers), new Action<IForumMember>(this.detach_ForumMembers));
			this._Posts = new EntitySet<IPost>(new Action<IPost>(this.attach_Posts), new Action<IPost>(this.detach_Posts));
			this._SubForums = new EntitySet<ISubForum>(new Action<ISubForum>(this.attach_SubForums), new Action<ISubForum>(this.detach_SubForums));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Admin", Storage="_Admins", ThisKey="id", OtherKey="forumId")]
		public EntitySet<IAdmin> IAdmins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_ForumMember", Storage="_ForumMembers", ThisKey="id", OtherKey="forumId")]
		public EntitySet<IForumMember> IForumMembers
		{
			get
			{
				return this._ForumMembers;
			}
			set
			{
				this._ForumMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Post", Storage="_Posts", ThisKey="id", OtherKey="forumId")]
		public EntitySet<IPost> IPosts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_SubForum", Storage="_SubForums", ThisKey="id", OtherKey="forumId")]
		public EntitySet<ISubForum> ISubForums
		{
			get
			{
				return this._SubForums;
			}
			set
			{
				this._SubForums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(IAdmin entity)
		{
			this.SendPropertyChanging();
			entity.IForum = this;
		}
		
		private void detach_Admins(IAdmin entity)
		{
			this.SendPropertyChanging();
			entity.IForum = null;
		}
		
		private void attach_ForumMembers(IForumMember entity)
		{
			this.SendPropertyChanging();
			entity.IForum = this;
		}
		
		private void detach_ForumMembers(IForumMember entity)
		{
			this.SendPropertyChanging();
			entity.IForum = null;
		}
		
		private void attach_Posts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IForum = this;
		}
		
		private void detach_Posts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IForum = null;
		}
		
		private void attach_SubForums(ISubForum entity)
		{
			this.SendPropertyChanging();
			entity.IForum = this;
		}
		
		private void detach_SubForums(ISubForum entity)
		{
			this.SendPropertyChanging();
			entity.IForum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Moderators")]
	public partial class IModerator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _subForumId;
		
		private System.DateTime _term;
		
		private EntityRef<IUser> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnsubForumIdChanging(int value);
    partial void OnsubForumIdChanged();
    partial void OntermChanging(System.DateTime value);
    partial void OntermChanged();
    #endregion
		
		public IModerator()
		{
			this._User = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subForumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int subForumId
		{
			get
			{
				return this._subForumId;
			}
			set
			{
				if ((this._subForumId != value))
				{
					this.OnsubForumIdChanging(value);
					this.SendPropertyChanging();
					this._subForumId = value;
					this.SendPropertyChanged("subForumId");
					this.OnsubForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_term", DbType="Date NOT NULL")]
		public System.DateTime term
		{
			get
			{
				return this._term;
			}
			set
			{
				if ((this._term != value))
				{
					this.OntermChanging(value);
					this.SendPropertyChanging();
					this._term = value;
					this.SendPropertyChanged("term");
					this.OntermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Moderator", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				IUser previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IModerators.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IModerators.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notifications")]
	public partial class INotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _fromUserId;
		
		private int _toUserId;
		
		private string _message;
		
		private bool _isNew;
		
		private EntityRef<IUser> _User;
		
		private EntityRef<IUser> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfromUserIdChanging(int value);
    partial void OnfromUserIdChanged();
    partial void OntoUserIdChanging(int value);
    partial void OntoUserIdChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OnisNewChanging(bool value);
    partial void OnisNewChanged();
    #endregion
		
		public INotification()
		{
			this._User = default(EntityRef<IUser>);
			this._User1 = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromUserId", DbType="Int NOT NULL")]
		public int fromUserId
		{
			get
			{
				return this._fromUserId;
			}
			set
			{
				if ((this._fromUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfromUserIdChanging(value);
					this.SendPropertyChanging();
					this._fromUserId = value;
					this.SendPropertyChanged("fromUserId");
					this.OnfromUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toUserId", DbType="Int NOT NULL")]
		public int toUserId
		{
			get
			{
				return this._toUserId;
			}
			set
			{
				if ((this._toUserId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntoUserIdChanging(value);
					this.SendPropertyChanging();
					this._toUserId = value;
					this.SendPropertyChanged("toUserId");
					this.OntoUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NChar(4000) NOT NULL", CanBeNull=false)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isNew", DbType="Bit NOT NULL")]
		public bool isNew
		{
			get
			{
				return this._isNew;
			}
			set
			{
				if ((this._isNew != value))
				{
					this.OnisNewChanging(value);
					this.SendPropertyChanging();
					this._isNew = value;
					this.SendPropertyChanged("isNew");
					this.OnisNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification", Storage="_User", ThisKey="fromUserId", OtherKey="id", IsForeignKey=true)]
		public IUser User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				IUser previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._fromUserId = value.id;
					}
					else
					{
						this._fromUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification1", Storage="_User1", ThisKey="toUserId", OtherKey="id", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				IUser previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.INotifications.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.INotifications.Add(this);
						this._toUserId = value.id;
					}
					else
					{
						this._toUserId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Posts")]
	public partial class IPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private System.Nullable<int> _reply;
		
		private int _forumId;
		
		private string _title;
		
		private string _cnt;
		
		private System.DateTime _publish;
		
		private EntitySet<IPost> _Posts;
		
		private EntityRef<IForum> _Forum;
		
		private EntityRef<IPost> _Post1;
		
		private EntityRef<IUser> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnreplyChanging(System.Nullable<int> value);
    partial void OnreplyChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncntChanging(string value);
    partial void OncntChanged();
    partial void OnpublishChanging(System.DateTime value);
    partial void OnpublishChanged();
    #endregion
		
		public IPost()
		{
			this._Posts = new EntitySet<IPost>(new Action<IPost>(this.attach_Posts), new Action<IPost>(this.detach_Posts));
			this._Forum = default(EntityRef<IForum>);
			this._Post1 = default(EntityRef<IPost>);
			this._User = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reply", DbType="Int")]
		public System.Nullable<int> reply
		{
			get
			{
				return this._reply;
			}
			set
			{
				if ((this._reply != value))
				{
					if (this._Post1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreplyChanging(value);
					this.SendPropertyChanging();
					this._reply = value;
					this.SendPropertyChanged("reply");
					this.OnreplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL")]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cnt", DbType="NChar(1000) NOT NULL", CanBeNull=false)]
		public string cnt
		{
			get
			{
				return this._cnt;
			}
			set
			{
				if ((this._cnt != value))
				{
					this.OncntChanging(value);
					this.SendPropertyChanging();
					this._cnt = value;
					this.SendPropertyChanged("cnt");
					this.OncntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publish", DbType="Date NOT NULL")]
		public System.DateTime publish
		{
			get
			{
				return this._publish;
			}
			set
			{
				if ((this._publish != value))
				{
					this.OnpublishChanging(value);
					this.SendPropertyChanging();
					this._publish = value;
					this.SendPropertyChanged("publish");
					this.OnpublishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Post", Storage="_Posts", ThisKey="id", OtherKey="reply")]
		public EntitySet<IPost> IPosts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Post", Storage="_Forum", ThisKey="forumId", OtherKey="id", IsForeignKey=true)]
		public IForum IForum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				IForum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.IPosts.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.IPosts.Add(this);
						this._forumId = value.id;
					}
					else
					{
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IForum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Post", Storage="_Post1", ThisKey="reply", OtherKey="id", IsForeignKey=true)]
		public IPost Post1
		{
			get
			{
				return this._Post1.Entity;
			}
			set
			{
				IPost previousValue = this._Post1.Entity;
				if (((previousValue != value) 
							|| (this._Post1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post1.Entity = null;
						previousValue.IPosts.Remove(this);
					}
					this._Post1.Entity = value;
					if ((value != null))
					{
						value.IPosts.Add(this);
						this._reply = value.id;
					}
					else
					{
						this._reply = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				IUser previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IPosts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IPosts.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.Post1 = this;
		}
		
		private void detach_Posts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.Post1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubForums")]
	public partial class ISubForum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _forumId;
		
		private string _subject;
		
		private EntityRef<IForum> _Forum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    #endregion
		
		public ISubForum()
		{
			this._Forum = default(EntityRef<IForum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL")]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_SubForum", Storage="_Forum", ThisKey="forumId", OtherKey="id", IsForeignKey=true)]
		public IForum IForum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				IForum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.ISubForums.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.ISubForums.Add(this);
						this._forumId = value.id;
					}
					else
					{
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IForum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class IUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _userName;
		
		private string _password;
		
		private string _name;
		
		private string _email;
		
		private EntitySet<IAdmin> _Admins;
		
		private EntitySet<IForumMember> _ForumMembers;
		
		private EntitySet<IModerator> _Moderators;
		
		private EntitySet<INotification> _Notifications;
		
		private EntitySet<INotification> _Notifications1;
		
		private EntitySet<IPost> _Posts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public IUser()
		{
			this._Admins = new EntitySet<IAdmin>(new Action<IAdmin>(this.attach_Admins), new Action<IAdmin>(this.detach_Admins));
			this._ForumMembers = new EntitySet<IForumMember>(new Action<IForumMember>(this.attach_ForumMembers), new Action<IForumMember>(this.detach_ForumMembers));
			this._Moderators = new EntitySet<IModerator>(new Action<IModerator>(this.attach_Moderators), new Action<IModerator>(this.detach_Moderators));
			this._Notifications = new EntitySet<INotification>(new Action<INotification>(this.attach_Notifications), new Action<INotification>(this.detach_Notifications));
			this._Notifications1 = new EntitySet<INotification>(new Action<INotification>(this.attach_Notifications1), new Action<INotification>(this.detach_Notifications1));
			this._Posts = new EntitySet<IPost>(new Action<IPost>(this.attach_Posts), new Action<IPost>(this.detach_Posts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_Admins", ThisKey="id", OtherKey="userId")]
		public EntitySet<IAdmin> IAdmins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ForumMember", Storage="_ForumMembers", ThisKey="id", OtherKey="userId")]
		public EntitySet<IForumMember> IForumMembers
		{
			get
			{
				return this._ForumMembers;
			}
			set
			{
				this._ForumMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Moderator", Storage="_Moderators", ThisKey="id", OtherKey="userId")]
		public EntitySet<IModerator> IModerators
		{
			get
			{
				return this._Moderators;
			}
			set
			{
				this._Moderators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification", Storage="_Notifications", ThisKey="id", OtherKey="fromUserId")]
		public EntitySet<INotification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification1", Storage="_Notifications1", ThisKey="id", OtherKey="toUserId")]
		public EntitySet<INotification> INotifications
		{
			get
			{
				return this._Notifications1;
			}
			set
			{
				this._Notifications1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_Posts", ThisKey="id", OtherKey="userId")]
		public EntitySet<IPost> IPosts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(IAdmin entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_Admins(IAdmin entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
		
		private void attach_ForumMembers(IForumMember entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_ForumMembers(IForumMember entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
		
		private void attach_Moderators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_Moderators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
		
		private void attach_Notifications(INotification entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Notifications(INotification entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notifications1(INotification entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_Notifications1(INotification entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
		
		private void attach_Posts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_Posts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
	}
}
#pragma warning restore 1591

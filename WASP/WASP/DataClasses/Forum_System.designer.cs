#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WASP.DataClasses
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Forums_System")]
	public partial class Forum_SystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIAdmin(IAdmin instance);
    partial void UpdateIAdmin(IAdmin instance);
    partial void DeleteIAdmin(IAdmin instance);
    partial void InsertIForum(IForum instance);
    partial void UpdateIForum(IForum instance);
    partial void DeleteIForum(IForum instance);
    partial void InsertIModerator(IModerator instance);
    partial void UpdateIModerator(IModerator instance);
    partial void DeleteIModerator(IModerator instance);
    partial void InsertIndex(Index instance);
    partial void UpdateIndex(Index instance);
    partial void DeleteIndex(Index instance);
    partial void InsertINotification(INotification instance);
    partial void UpdateINotification(INotification instance);
    partial void DeleteINotification(INotification instance);
    partial void InsertIPolicy(IPolicy instance);
    partial void UpdateIPolicy(IPolicy instance);
    partial void DeleteIPolicy(IPolicy instance);
    partial void InsertIPost(IPost instance);
    partial void UpdateIPost(IPost instance);
    partial void DeleteIPost(IPost instance);
    partial void InsertISubForum(ISubForum instance);
    partial void UpdateISubForum(ISubForum instance);
    partial void DeleteISubForum(ISubForum instance);
    partial void InsertISuperUser(ISuperUser instance);
    partial void UpdateISuperUser(ISuperUser instance);
    partial void DeleteISuperUser(ISuperUser instance);
    partial void InsertIUser(IUser instance);
    partial void UpdateIUser(IUser instance);
    partial void DeleteIUser(IUser instance);
    #endregion
		
		public Forum_SystemDataContext() : 
				base(global::WASP.Properties.Settings.Default.Forums_SystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Forum_SystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Forum_SystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Forum_SystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Forum_SystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<IAdmin> IAdmins
		{
			get
			{
				return this.GetTable<IAdmin>();
			}
		}
		
		public System.Data.Linq.Table<IForum> IForums
		{
			get
			{
				return this.GetTable<IForum>();
			}
		}
		
		public System.Data.Linq.Table<IModerator> IModerators
		{
			get
			{
				return this.GetTable<IModerator>();
			}
		}
		
		public System.Data.Linq.Table<Index> Indexes
		{
			get
			{
				return this.GetTable<Index>();
			}
		}
		
		public System.Data.Linq.Table<INotification> INotifications
		{
			get
			{
				return this.GetTable<INotification>();
			}
		}
		
		public System.Data.Linq.Table<IPolicy> IPolicies
		{
			get
			{
				return this.GetTable<IPolicy>();
			}
		}
		
		public System.Data.Linq.Table<IPost> IPosts
		{
			get
			{
				return this.GetTable<IPost>();
			}
		}
		
		public System.Data.Linq.Table<ISubForum> ISubForums
		{
			get
			{
				return this.GetTable<ISubForum>();
			}
		}
		
		public System.Data.Linq.Table<ISuperUser> ISuperUsers
		{
			get
			{
				return this.GetTable<ISuperUser>();
			}
		}
		
		public System.Data.Linq.Table<IUser> IUsers
		{
			get
			{
				return this.GetTable<IUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IAdmins")]
	public partial class IAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _forumId;
		
		private EntitySet<IModerator> _IModerators;
		
		private EntityRef<IUser> _IUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    #endregion
		
		public IAdmin()
		{
			this._IModerators = new EntitySet<IModerator>(new Action<IModerator>(this.attach_IModerators), new Action<IModerator>(this.detach_IModerators));
			this._IUser = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._IUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._IUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IAdmin_IModerator", Storage="_IModerators", ThisKey="userId,forumId", OtherKey="byAdmin,forumId")]
		public EntitySet<IModerator> IModerators
		{
			get
			{
				return this._IModerators;
			}
			set
			{
				this._IModerators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_IAdmin", Storage="_IUser", ThisKey="userId,forumId", OtherKey="id,forumId", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._IUser.Entity;
			}
			set
			{
				IUser previousValue = this._IUser.Entity;
				if (((previousValue != value) 
							|| (this._IUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IUser.Entity = null;
						previousValue.IAdmin = null;
					}
					this._IUser.Entity = value;
					if ((value != null))
					{
						value.IAdmin = this;
						this._userId = value.id;
						this._forumId = value.forumId;
					}
					else
					{
						this._userId = default(int);
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IModerators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.IAdmin = this;
		}
		
		private void detach_IModerators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.IAdmin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IForums")]
	public partial class IForum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _subject;
		
		private string _description;
		
		private System.Nullable<int> _policyId;
		
		private EntitySet<ISubForum> _ISubForums;
		
		private EntitySet<IUser> _IUsers;
		
		private EntityRef<IPolicy> _IPolicy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnpolicyIdChanging(System.Nullable<int> value);
    partial void OnpolicyIdChanged();
    #endregion
		
		public IForum()
		{
			this._ISubForums = new EntitySet<ISubForum>(new Action<ISubForum>(this.attach_ISubForums), new Action<ISubForum>(this.detach_ISubForums));
			this._IUsers = new EntitySet<IUser>(new Action<IUser>(this.attach_IUsers), new Action<IUser>(this.detach_IUsers));
			this._IPolicy = default(EntityRef<IPolicy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_policyId", DbType="Int")]
		public System.Nullable<int> policyId
		{
			get
			{
				return this._policyId;
			}
			set
			{
				if ((this._policyId != value))
				{
					if (this._IPolicy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpolicyIdChanging(value);
					this.SendPropertyChanging();
					this._policyId = value;
					this.SendPropertyChanged("policyId");
					this.OnpolicyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IForum_ISubForum", Storage="_ISubForums", ThisKey="id", OtherKey="forumId")]
		public EntitySet<ISubForum> ISubForums
		{
			get
			{
				return this._ISubForums;
			}
			set
			{
				this._ISubForums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IForum_IUser", Storage="_IUsers", ThisKey="id", OtherKey="forumId")]
		public EntitySet<IUser> IUsers
		{
			get
			{
				return this._IUsers;
			}
			set
			{
				this._IUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IPolicy_IForum", Storage="_IPolicy", ThisKey="policyId", OtherKey="id", IsForeignKey=true)]
		public IPolicy IPolicy
		{
			get
			{
				return this._IPolicy.Entity;
			}
			set
			{
				IPolicy previousValue = this._IPolicy.Entity;
				if (((previousValue != value) 
							|| (this._IPolicy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IPolicy.Entity = null;
						previousValue.IForums.Remove(this);
					}
					this._IPolicy.Entity = value;
					if ((value != null))
					{
						value.IForums.Add(this);
						this._policyId = value.id;
					}
					else
					{
						this._policyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("IPolicy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISubForums(ISubForum entity)
		{
			this.SendPropertyChanging();
			entity.IForum = this;
		}
		
		private void detach_ISubForums(ISubForum entity)
		{
			this.SendPropertyChanging();
			entity.IForum = null;
		}
		
		private void attach_IUsers(IUser entity)
		{
			this.SendPropertyChanging();
			entity.IForum = this;
		}
		
		private void detach_IUsers(IUser entity)
		{
			this.SendPropertyChanging();
			entity.IForum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IModerators")]
	public partial class IModerator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _forumId;
		
		private int _subForumId;
		
		private System.DateTime _term;
		
		private int _byAdmin;
		
		private System.DateTime _startDate;
		
		private EntityRef<IAdmin> _IAdmin;
		
		private EntityRef<ISubForum> _ISubForum;
		
		private EntityRef<IUser> _IUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    partial void OnsubForumIdChanging(int value);
    partial void OnsubForumIdChanged();
    partial void OntermChanging(System.DateTime value);
    partial void OntermChanged();
    partial void OnbyAdminChanging(int value);
    partial void OnbyAdminChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    #endregion
		
		public IModerator()
		{
			this._IAdmin = default(EntityRef<IAdmin>);
			this._ISubForum = default(EntityRef<ISubForum>);
			this._IUser = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._IUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if ((this._IAdmin.HasLoadedOrAssignedValue || this._IUser.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subForumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int subForumId
		{
			get
			{
				return this._subForumId;
			}
			set
			{
				if ((this._subForumId != value))
				{
					if (this._ISubForum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubForumIdChanging(value);
					this.SendPropertyChanging();
					this._subForumId = value;
					this.SendPropertyChanged("subForumId");
					this.OnsubForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_term", DbType="Date NOT NULL")]
		public System.DateTime term
		{
			get
			{
				return this._term;
			}
			set
			{
				if ((this._term != value))
				{
					this.OntermChanging(value);
					this.SendPropertyChanging();
					this._term = value;
					this.SendPropertyChanged("term");
					this.OntermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_byAdmin", DbType="Int NOT NULL")]
		public int byAdmin
		{
			get
			{
				return this._byAdmin;
			}
			set
			{
				if ((this._byAdmin != value))
				{
					if (this._IAdmin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbyAdminChanging(value);
					this.SendPropertyChanging();
					this._byAdmin = value;
					this.SendPropertyChanged("byAdmin");
					this.OnbyAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IAdmin_IModerator", Storage="_IAdmin", ThisKey="byAdmin,forumId", OtherKey="userId,forumId", IsForeignKey=true)]
		public IAdmin IAdmin
		{
			get
			{
				return this._IAdmin.Entity;
			}
			set
			{
				IAdmin previousValue = this._IAdmin.Entity;
				if (((previousValue != value) 
							|| (this._IAdmin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IAdmin.Entity = null;
						previousValue.IModerators.Remove(this);
					}
					this._IAdmin.Entity = value;
					if ((value != null))
					{
						value.IModerators.Add(this);
						this._byAdmin = value.userId;
						this._forumId = value.forumId;
					}
					else
					{
						this._byAdmin = default(int);
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IAdmin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISubForum_IModerator", Storage="_ISubForum", ThisKey="subForumId", OtherKey="id", IsForeignKey=true)]
		public ISubForum ISubForum
		{
			get
			{
				return this._ISubForum.Entity;
			}
			set
			{
				ISubForum previousValue = this._ISubForum.Entity;
				if (((previousValue != value) 
							|| (this._ISubForum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISubForum.Entity = null;
						previousValue.IModerators.Remove(this);
					}
					this._ISubForum.Entity = value;
					if ((value != null))
					{
						value.IModerators.Add(this);
						this._subForumId = value.id;
					}
					else
					{
						this._subForumId = default(int);
					}
					this.SendPropertyChanged("ISubForum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_IModerator", Storage="_IUser", ThisKey="userId,forumId", OtherKey="id,forumId", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._IUser.Entity;
			}
			set
			{
				IUser previousValue = this._IUser.Entity;
				if (((previousValue != value) 
							|| (this._IUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IUser.Entity = null;
						previousValue.IModerators.Remove(this);
					}
					this._IUser.Entity = value;
					if ((value != null))
					{
						value.IModerators.Add(this);
						this._userId = value.id;
						this._forumId = value.forumId;
					}
					else
					{
						this._userId = default(int);
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Indexes")]
	public partial class Index : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _forum;
		
		private int _subforum;
		
		private int _policy;
		
		private int _post;
		
		private int _notification;
		
		private int _id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnforumChanging(int value);
    partial void OnforumChanged();
    partial void OnsubforumChanging(int value);
    partial void OnsubforumChanged();
    partial void OnpolicyChanging(int value);
    partial void OnpolicyChanged();
    partial void OnpostChanging(int value);
    partial void OnpostChanged();
    partial void OnnotificationChanging(int value);
    partial void OnnotificationChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Index()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forum", DbType="Int NOT NULL")]
		public int forum
		{
			get
			{
				return this._forum;
			}
			set
			{
				if ((this._forum != value))
				{
					this.OnforumChanging(value);
					this.SendPropertyChanging();
					this._forum = value;
					this.SendPropertyChanged("forum");
					this.OnforumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subforum", DbType="Int NOT NULL")]
		public int subforum
		{
			get
			{
				return this._subforum;
			}
			set
			{
				if ((this._subforum != value))
				{
					this.OnsubforumChanging(value);
					this.SendPropertyChanging();
					this._subforum = value;
					this.SendPropertyChanged("subforum");
					this.OnsubforumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_policy", DbType="Int NOT NULL")]
		public int policy
		{
			get
			{
				return this._policy;
			}
			set
			{
				if ((this._policy != value))
				{
					this.OnpolicyChanging(value);
					this.SendPropertyChanging();
					this._policy = value;
					this.SendPropertyChanged("policy");
					this.OnpolicyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_post", DbType="Int NOT NULL")]
		public int post
		{
			get
			{
				return this._post;
			}
			set
			{
				if ((this._post != value))
				{
					this.OnpostChanging(value);
					this.SendPropertyChanging();
					this._post = value;
					this.SendPropertyChanged("post");
					this.OnpostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notification", DbType="Int NOT NULL")]
		public int notification
		{
			get
			{
				return this._notification;
			}
			set
			{
				if ((this._notification != value))
				{
					this.OnnotificationChanging(value);
					this.SendPropertyChanging();
					this._notification = value;
					this.SendPropertyChanged("notification");
					this.OnnotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.INotifications")]
	public partial class INotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _fromUserId;
		
		private int _fromForumId;
		
		private int _toUserId;
		
		private int _toForumId;
		
		private string _message;
		
		private bool _isNew;
		
		private EntityRef<IUser> _IUser;
		
		private EntityRef<IUser> _IUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfromUserIdChanging(int value);
    partial void OnfromUserIdChanged();
    partial void OnfromForumIdChanging(int value);
    partial void OnfromForumIdChanged();
    partial void OntoUserIdChanging(int value);
    partial void OntoUserIdChanged();
    partial void OntoForumIdChanging(int value);
    partial void OntoForumIdChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OnisNewChanging(bool value);
    partial void OnisNewChanged();
    #endregion
		
		public INotification()
		{
			this._IUser = default(EntityRef<IUser>);
			this._IUser1 = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromUserId", DbType="Int NOT NULL")]
		public int fromUserId
		{
			get
			{
				return this._fromUserId;
			}
			set
			{
				if ((this._fromUserId != value))
				{
					if (this._IUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfromUserIdChanging(value);
					this.SendPropertyChanging();
					this._fromUserId = value;
					this.SendPropertyChanged("fromUserId");
					this.OnfromUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromForumId", DbType="Int NOT NULL")]
		public int fromForumId
		{
			get
			{
				return this._fromForumId;
			}
			set
			{
				if ((this._fromForumId != value))
				{
					if (this._IUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfromForumIdChanging(value);
					this.SendPropertyChanging();
					this._fromForumId = value;
					this.SendPropertyChanged("fromForumId");
					this.OnfromForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toUserId", DbType="Int NOT NULL")]
		public int toUserId
		{
			get
			{
				return this._toUserId;
			}
			set
			{
				if ((this._toUserId != value))
				{
					if (this._IUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntoUserIdChanging(value);
					this.SendPropertyChanging();
					this._toUserId = value;
					this.SendPropertyChanged("toUserId");
					this.OntoUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toForumId", DbType="Int NOT NULL")]
		public int toForumId
		{
			get
			{
				return this._toForumId;
			}
			set
			{
				if ((this._toForumId != value))
				{
					if (this._IUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntoForumIdChanging(value);
					this.SendPropertyChanging();
					this._toForumId = value;
					this.SendPropertyChanged("toForumId");
					this.OntoForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NChar(4000)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isNew", DbType="Bit NOT NULL")]
		public bool isNew
		{
			get
			{
				return this._isNew;
			}
			set
			{
				if ((this._isNew != value))
				{
					this.OnisNewChanging(value);
					this.SendPropertyChanging();
					this._isNew = value;
					this.SendPropertyChanged("isNew");
					this.OnisNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_INotification", Storage="_IUser", ThisKey="fromUserId,fromForumId", OtherKey="id,forumId", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._IUser.Entity;
			}
			set
			{
				IUser previousValue = this._IUser.Entity;
				if (((previousValue != value) 
							|| (this._IUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IUser.Entity = null;
						previousValue.INotifications.Remove(this);
					}
					this._IUser.Entity = value;
					if ((value != null))
					{
						value.INotifications.Add(this);
						this._fromUserId = value.id;
						this._fromForumId = value.forumId;
					}
					else
					{
						this._fromUserId = default(int);
						this._fromForumId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_INotification1", Storage="_IUser1", ThisKey="toUserId,toForumId", OtherKey="id,forumId", IsForeignKey=true)]
		public IUser IUser1
		{
			get
			{
				return this._IUser1.Entity;
			}
			set
			{
				IUser previousValue = this._IUser1.Entity;
				if (((previousValue != value) 
							|| (this._IUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IUser1.Entity = null;
						previousValue.INotifications1.Remove(this);
					}
					this._IUser1.Entity = value;
					if ((value != null))
					{
						value.INotifications1.Add(this);
						this._toUserId = value.id;
						this._toForumId = value.forumId;
					}
					else
					{
						this._toUserId = default(int);
						this._toForumId = default(int);
					}
					this.SendPropertyChanged("IUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IPolicies")]
	public partial class IPolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private long _passwordPeriod;
		
		private bool _emailVerification;
		
		private long _minimumSeniority;
		
		private int _usersLoad;
		
		private int _postDeletePolicy;
		
		private EntitySet<IForum> _IForums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpasswordPeriodChanging(long value);
    partial void OnpasswordPeriodChanged();
    partial void OnemailVerificationChanging(bool value);
    partial void OnemailVerificationChanged();
    partial void OnminimumSeniorityChanging(long value);
    partial void OnminimumSeniorityChanged();
    partial void OnusersLoadChanging(int value);
    partial void OnusersLoadChanged();
    partial void OnpostDeletePolicyChanging(int value);
    partial void OnpostDeletePolicyChanged();
    #endregion
		
		public IPolicy()
		{
			this._IForums = new EntitySet<IForum>(new Action<IForum>(this.attach_IForums), new Action<IForum>(this.detach_IForums));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passwordPeriod", DbType="BigInt NOT NULL")]
		public long passwordPeriod
		{
			get
			{
				return this._passwordPeriod;
			}
			set
			{
				if ((this._passwordPeriod != value))
				{
					this.OnpasswordPeriodChanging(value);
					this.SendPropertyChanging();
					this._passwordPeriod = value;
					this.SendPropertyChanged("passwordPeriod");
					this.OnpasswordPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailVerification", DbType="Bit NOT NULL")]
		public bool emailVerification
		{
			get
			{
				return this._emailVerification;
			}
			set
			{
				if ((this._emailVerification != value))
				{
					this.OnemailVerificationChanging(value);
					this.SendPropertyChanging();
					this._emailVerification = value;
					this.SendPropertyChanged("emailVerification");
					this.OnemailVerificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minimumSeniority", DbType="BigInt NOT NULL")]
		public long minimumSeniority
		{
			get
			{
				return this._minimumSeniority;
			}
			set
			{
				if ((this._minimumSeniority != value))
				{
					this.OnminimumSeniorityChanging(value);
					this.SendPropertyChanging();
					this._minimumSeniority = value;
					this.SendPropertyChanged("minimumSeniority");
					this.OnminimumSeniorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usersLoad", DbType="Int NOT NULL")]
		public int usersLoad
		{
			get
			{
				return this._usersLoad;
			}
			set
			{
				if ((this._usersLoad != value))
				{
					this.OnusersLoadChanging(value);
					this.SendPropertyChanging();
					this._usersLoad = value;
					this.SendPropertyChanged("usersLoad");
					this.OnusersLoadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postDeletePolicy", DbType="Int NOT NULL")]
		public int postDeletePolicy
		{
			get
			{
				return this._postDeletePolicy;
			}
			set
			{
				if ((this._postDeletePolicy != value))
				{
					this.OnpostDeletePolicyChanging(value);
					this.SendPropertyChanging();
					this._postDeletePolicy = value;
					this.SendPropertyChanged("postDeletePolicy");
					this.OnpostDeletePolicyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IPolicy_IForum", Storage="_IForums", ThisKey="id", OtherKey="policyId")]
		public EntitySet<IForum> IForums
		{
			get
			{
				return this._IForums;
			}
			set
			{
				this._IForums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IForums(IForum entity)
		{
			this.SendPropertyChanging();
			entity.IPolicy = this;
		}
		
		private void detach_IForums(IForum entity)
		{
			this.SendPropertyChanging();
			entity.IPolicy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IPosts")]
	public partial class IPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private int _forumId;
		
		private System.Nullable<int> _reply;
		
		private int _subforumId;
		
		private string _title;
		
		private string _cnt;
		
		private System.DateTime _publishAt;
		
		private System.DateTime _editAt;
		
		private EntitySet<IPost> _IPosts;
		
		private EntityRef<IPost> _IPost1;
		
		private EntityRef<ISubForum> _ISubForum;
		
		private EntityRef<IUser> _IUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    partial void OnreplyChanging(System.Nullable<int> value);
    partial void OnreplyChanged();
    partial void OnsubforumIdChanging(int value);
    partial void OnsubforumIdChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncntChanging(string value);
    partial void OncntChanged();
    partial void OnpublishAtChanging(System.DateTime value);
    partial void OnpublishAtChanged();
    partial void OneditAtChanging(System.DateTime value);
    partial void OneditAtChanged();
    #endregion
		
		public IPost()
		{
			this._IPosts = new EntitySet<IPost>(new Action<IPost>(this.attach_IPosts), new Action<IPost>(this.detach_IPosts));
			this._IPost1 = default(EntityRef<IPost>);
			this._ISubForum = default(EntityRef<ISubForum>);
			this._IUser = default(EntityRef<IUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._IUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL")]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._IUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reply", DbType="Int")]
		public System.Nullable<int> reply
		{
			get
			{
				return this._reply;
			}
			set
			{
				if ((this._reply != value))
				{
					if (this._IPost1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreplyChanging(value);
					this.SendPropertyChanging();
					this._reply = value;
					this.SendPropertyChanged("reply");
					this.OnreplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subforumId", DbType="Int NOT NULL")]
		public int subforumId
		{
			get
			{
				return this._subforumId;
			}
			set
			{
				if ((this._subforumId != value))
				{
					if (this._ISubForum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubforumIdChanging(value);
					this.SendPropertyChanging();
					this._subforumId = value;
					this.SendPropertyChanged("subforumId");
					this.OnsubforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cnt", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string cnt
		{
			get
			{
				return this._cnt;
			}
			set
			{
				if ((this._cnt != value))
				{
					this.OncntChanging(value);
					this.SendPropertyChanging();
					this._cnt = value;
					this.SendPropertyChanged("cnt");
					this.OncntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishAt", DbType="Date NOT NULL")]
		public System.DateTime publishAt
		{
			get
			{
				return this._publishAt;
			}
			set
			{
				if ((this._publishAt != value))
				{
					this.OnpublishAtChanging(value);
					this.SendPropertyChanging();
					this._publishAt = value;
					this.SendPropertyChanged("publishAt");
					this.OnpublishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_editAt", DbType="Date NOT NULL")]
		public System.DateTime editAt
		{
			get
			{
				return this._editAt;
			}
			set
			{
				if ((this._editAt != value))
				{
					this.OneditAtChanging(value);
					this.SendPropertyChanging();
					this._editAt = value;
					this.SendPropertyChanged("editAt");
					this.OneditAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IPost_IPost", Storage="_IPosts", ThisKey="id", OtherKey="reply")]
		public EntitySet<IPost> IPosts
		{
			get
			{
				return this._IPosts;
			}
			set
			{
				this._IPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IPost_IPost", Storage="_IPost1", ThisKey="reply", OtherKey="id", IsForeignKey=true)]
		public IPost IPost1
		{
			get
			{
				return this._IPost1.Entity;
			}
			set
			{
				IPost previousValue = this._IPost1.Entity;
				if (((previousValue != value) 
							|| (this._IPost1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IPost1.Entity = null;
						previousValue.IPosts.Remove(this);
					}
					this._IPost1.Entity = value;
					if ((value != null))
					{
						value.IPosts.Add(this);
						this._reply = value.id;
					}
					else
					{
						this._reply = default(Nullable<int>);
					}
					this.SendPropertyChanged("IPost1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISubForum_IPost", Storage="_ISubForum", ThisKey="subforumId", OtherKey="id", IsForeignKey=true)]
		public ISubForum ISubForum
		{
			get
			{
				return this._ISubForum.Entity;
			}
			set
			{
				ISubForum previousValue = this._ISubForum.Entity;
				if (((previousValue != value) 
							|| (this._ISubForum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISubForum.Entity = null;
						previousValue.IPosts.Remove(this);
					}
					this._ISubForum.Entity = value;
					if ((value != null))
					{
						value.IPosts.Add(this);
						this._subforumId = value.id;
					}
					else
					{
						this._subforumId = default(int);
					}
					this.SendPropertyChanged("ISubForum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_IPost", Storage="_IUser", ThisKey="userId,forumId", OtherKey="id,forumId", IsForeignKey=true)]
		public IUser IUser
		{
			get
			{
				return this._IUser.Entity;
			}
			set
			{
				IUser previousValue = this._IUser.Entity;
				if (((previousValue != value) 
							|| (this._IUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IUser.Entity = null;
						previousValue.IPosts.Remove(this);
					}
					this._IUser.Entity = value;
					if ((value != null))
					{
						value.IPosts.Add(this);
						this._userId = value.id;
						this._forumId = value.forumId;
					}
					else
					{
						this._userId = default(int);
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IPosts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IPost1 = this;
		}
		
		private void detach_IPosts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IPost1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISubForums")]
	public partial class ISubForum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _forumId;
		
		private string _subject;
		
		private string _description;
		
		private EntitySet<IModerator> _IModerators;
		
		private EntitySet<IPost> _IPosts;
		
		private EntityRef<IForum> _IForum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public ISubForum()
		{
			this._IModerators = new EntitySet<IModerator>(new Action<IModerator>(this.attach_IModerators), new Action<IModerator>(this.detach_IModerators));
			this._IPosts = new EntitySet<IPost>(new Action<IPost>(this.attach_IPosts), new Action<IPost>(this.detach_IPosts));
			this._IForum = default(EntityRef<IForum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL")]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._IForum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISubForum_IModerator", Storage="_IModerators", ThisKey="id", OtherKey="subForumId")]
		public EntitySet<IModerator> IModerators
		{
			get
			{
				return this._IModerators;
			}
			set
			{
				this._IModerators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISubForum_IPost", Storage="_IPosts", ThisKey="id", OtherKey="subforumId")]
		public EntitySet<IPost> IPosts
		{
			get
			{
				return this._IPosts;
			}
			set
			{
				this._IPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IForum_ISubForum", Storage="_IForum", ThisKey="forumId", OtherKey="id", IsForeignKey=true)]
		public IForum IForum
		{
			get
			{
				return this._IForum.Entity;
			}
			set
			{
				IForum previousValue = this._IForum.Entity;
				if (((previousValue != value) 
							|| (this._IForum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IForum.Entity = null;
						previousValue.ISubForums.Remove(this);
					}
					this._IForum.Entity = value;
					if ((value != null))
					{
						value.ISubForums.Add(this);
						this._forumId = value.id;
					}
					else
					{
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IForum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IModerators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.ISubForum = this;
		}
		
		private void detach_IModerators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.ISubForum = null;
		}
		
		private void attach_IPosts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.ISubForum = this;
		}
		
		private void detach_IPosts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.ISubForum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISuperUsers")]
	public partial class ISuperUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _userName;
		
		private string _password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public ISuperUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IUsers")]
	public partial class IUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _forumId;
		
		private string _userName;
		
		private string _password;
		
		private string _name;
		
		private string _email;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _PasswordChangeDate;
		
		private EntityRef<IAdmin> _IAdmin;
		
		private EntitySet<IModerator> _IModerators;
		
		private EntitySet<INotification> _INotifications;
		
		private EntitySet<INotification> _INotifications1;
		
		private EntitySet<IPost> _IPosts;
		
		private EntityRef<IForum> _IForum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnforumIdChanging(int value);
    partial void OnforumIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnPasswordChangeDateChanging(System.DateTime value);
    partial void OnPasswordChangeDateChanged();
    #endregion
		
		public IUser()
		{
			this._IAdmin = default(EntityRef<IAdmin>);
			this._IModerators = new EntitySet<IModerator>(new Action<IModerator>(this.attach_IModerators), new Action<IModerator>(this.detach_IModerators));
			this._INotifications = new EntitySet<INotification>(new Action<INotification>(this.attach_INotifications), new Action<INotification>(this.detach_INotifications));
			this._INotifications1 = new EntitySet<INotification>(new Action<INotification>(this.attach_INotifications1), new Action<INotification>(this.detach_INotifications1));
			this._IPosts = new EntitySet<IPost>(new Action<IPost>(this.attach_IPosts), new Action<IPost>(this.detach_IPosts));
			this._IForum = default(EntityRef<IForum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int forumId
		{
			get
			{
				return this._forumId;
			}
			set
			{
				if ((this._forumId != value))
				{
					if (this._IForum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnforumIdChanging(value);
					this.SendPropertyChanging();
					this._forumId = value;
					this.SendPropertyChanged("forumId");
					this.OnforumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordChangeDate", DbType="Date NOT NULL")]
		public System.DateTime PasswordChangeDate
		{
			get
			{
				return this._PasswordChangeDate;
			}
			set
			{
				if ((this._PasswordChangeDate != value))
				{
					this.OnPasswordChangeDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordChangeDate = value;
					this.SendPropertyChanged("PasswordChangeDate");
					this.OnPasswordChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_IAdmin", Storage="_IAdmin", ThisKey="id,forumId", OtherKey="userId,forumId", IsUnique=true, IsForeignKey=false)]
		public IAdmin IAdmin
		{
			get
			{
				return this._IAdmin.Entity;
			}
			set
			{
				IAdmin previousValue = this._IAdmin.Entity;
				if (((previousValue != value) 
							|| (this._IAdmin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IAdmin.Entity = null;
						previousValue.IUser = null;
					}
					this._IAdmin.Entity = value;
					if ((value != null))
					{
						value.IUser = this;
					}
					this.SendPropertyChanged("IAdmin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_IModerator", Storage="_IModerators", ThisKey="id,forumId", OtherKey="userId,forumId")]
		public EntitySet<IModerator> IModerators
		{
			get
			{
				return this._IModerators;
			}
			set
			{
				this._IModerators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_INotification", Storage="_INotifications", ThisKey="id,forumId", OtherKey="fromUserId,fromForumId")]
		public EntitySet<INotification> INotifications
		{
			get
			{
				return this._INotifications;
			}
			set
			{
				this._INotifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_INotification1", Storage="_INotifications1", ThisKey="id,forumId", OtherKey="toUserId,toForumId")]
		public EntitySet<INotification> INotifications1
		{
			get
			{
				return this._INotifications1;
			}
			set
			{
				this._INotifications1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IUser_IPost", Storage="_IPosts", ThisKey="id,forumId", OtherKey="userId,forumId")]
		public EntitySet<IPost> IPosts
		{
			get
			{
				return this._IPosts;
			}
			set
			{
				this._IPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IForum_IUser", Storage="_IForum", ThisKey="forumId", OtherKey="id", IsForeignKey=true)]
		public IForum IForum
		{
			get
			{
				return this._IForum.Entity;
			}
			set
			{
				IForum previousValue = this._IForum.Entity;
				if (((previousValue != value) 
							|| (this._IForum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IForum.Entity = null;
						previousValue.IUsers.Remove(this);
					}
					this._IForum.Entity = value;
					if ((value != null))
					{
						value.IUsers.Add(this);
						this._forumId = value.id;
					}
					else
					{
						this._forumId = default(int);
					}
					this.SendPropertyChanged("IForum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IModerators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_IModerators(IModerator entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
		
		private void attach_INotifications(INotification entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_INotifications(INotification entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
		
		private void attach_INotifications1(INotification entity)
		{
			this.SendPropertyChanging();
			entity.IUser1 = this;
		}
		
		private void detach_INotifications1(INotification entity)
		{
			this.SendPropertyChanging();
			entity.IUser1 = null;
		}
		
		private void attach_IPosts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IUser = this;
		}
		
		private void detach_IPosts(IPost entity)
		{
			this.SendPropertyChanging();
			entity.IUser = null;
		}
	}
}
#pragma warning restore 1591
